// Mocks generated by Mockito 5.0.0 from annotations
// in cached_network_image/test/image_cache_manager_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:typed_data' as _i9;

import 'package:file/src/interface/file.dart' as _i4;
import 'package:flutter_cache_manager/src/cache_manager.dart' as _i6;
import 'package:flutter_cache_manager/src/cache_store.dart' as _i2;
import 'package:flutter_cache_manager/src/result/file_info.dart' as _i5;
import 'package:flutter_cache_manager/src/result/file_response.dart' as _i8;
import 'package:flutter_cache_manager/src/web/web_helper.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeCacheStore extends _i1.Fake implements _i2.CacheStore {}

class _FakeWebHelper extends _i1.Fake implements _i3.WebHelper {}

class _FakeFile extends _i1.Fake implements _i4.File {}

class _FakeFileInfo extends _i1.Fake implements _i5.FileInfo {}

/// A class which mocks [CacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheManager extends _i1.Mock implements _i6.CacheManager {
  MockCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CacheStore get store => (super.noSuchMethod(Invocation.getter(#store),
      returnValue: _FakeCacheStore()) as _i2.CacheStore);
  @override
  _i3.WebHelper get webHelper =>
      (super.noSuchMethod(Invocation.getter(#webHelper),
          returnValue: _FakeWebHelper()) as _i3.WebHelper);
  @override
  _i7.Future<_i4.File> getSingleFile(String? url,
          {String? key, Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getSingleFile, [url], {#key: key, #headers: headers}),
          returnValue: Future.value(_FakeFile())) as _i7.Future<_i4.File>);
  @override
  _i7.Stream<_i5.FileInfo> getFile(String? url,
          {String? key, Map<String, String>? headers}) =>
      (super.noSuchMethod(
          Invocation.method(#getFile, [url], {#key: key, #headers: headers}),
          returnValue:
              Stream<_i5.FileInfo>.empty()) as _i7.Stream<_i5.FileInfo>);
  @override
  _i7.Stream<_i8.FileResponse> getFileStream(String? url,
          {String? key,
          Map<String, String>? headers,
          bool? withProgress = false}) =>
      (super.noSuchMethod(
              Invocation.method(#getFileStream, [url],
                  {#key: key, #headers: headers, #withProgress: withProgress}),
              returnValue: Stream<_i8.FileResponse>.empty())
          as _i7.Stream<_i8.FileResponse>);
  @override
  _i7.Future<_i5.FileInfo> downloadFile(String? url,
          {String? key,
          Map<String, String>? authHeaders,
          bool? force = false}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadFile, [url],
                  {#key: key, #authHeaders: authHeaders, #force: force}),
              returnValue: Future.value(_FakeFileInfo()))
          as _i7.Future<_i5.FileInfo>);
  @override
  _i7.Future<_i5.FileInfo?> getFileFromCache(String? key,
          {bool? ignoreMemCache = false}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getFileFromCache, [key], {#ignoreMemCache: ignoreMemCache}),
              returnValue: Future.value(_FakeFileInfo()))
          as _i7.Future<_i5.FileInfo?>);
  @override
  _i7.Future<_i5.FileInfo?> getFileFromMemory(String? key) =>
      (super.noSuchMethod(Invocation.method(#getFileFromMemory, [key]),
              returnValue: Future.value(_FakeFileInfo()))
          as _i7.Future<_i5.FileInfo?>);
  @override
  _i7.Future<_i4.File> putFile(String? url, _i9.Uint8List? fileBytes,
          {String? key,
          String? eTag,
          Duration? maxAge = const Duration(days: 30),
          String? fileExtension = r'file'}) =>
      (super.noSuchMethod(
          Invocation.method(#putFile, [
            url,
            fileBytes
          ], {
            #key: key,
            #eTag: eTag,
            #maxAge: maxAge,
            #fileExtension: fileExtension
          }),
          returnValue: Future.value(_FakeFile())) as _i7.Future<_i4.File>);
  @override
  _i7.Future<_i4.File> putFileStream(String? url, _i7.Stream<List<int>>? source,
          {String? key,
          String? eTag,
          Duration? maxAge = const Duration(days: 30),
          String? fileExtension = r'file'}) =>
      (super.noSuchMethod(
          Invocation.method(#putFileStream, [
            url,
            source
          ], {
            #key: key,
            #eTag: eTag,
            #maxAge: maxAge,
            #fileExtension: fileExtension
          }),
          returnValue: Future.value(_FakeFile())) as _i7.Future<_i4.File>);
  @override
  _i7.Future<void> removeFile(String? key) =>
      (super.noSuchMethod(Invocation.method(#removeFile, [key]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> emptyCache() =>
      (super.noSuchMethod(Invocation.method(#emptyCache, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
}
